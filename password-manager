#!/usr/bin/bash

file_path="$HOME/pm/.password_store"

# Ensure the hidden file exists
if [ ! -f "$file_path" ]; then
    touch "$file_path"
fi

# Function to update the password in the file
update_file() {
    local var="$1"

    # Validate input format
    if [[ ! "$var" =~ ^[^:]+:[^:]+$ ]]; then
        echo "Invalid format. Use the format 'label:password'."
        return 1
    fi

    # Extract label and password
    local label=$(echo "$var" | cut -d':' -f1)
    local password=$(echo "$var" | cut -d':' -f2-)

    # Check if the label already exists
    if grep -q "^$label:" "$file_path"; then
        # Update existing password
        sed -i "/^$label:/c\\$label:$password" "$file_path"
        echo "Password for '$label' updated."
    else
        # Add new password
        echo "$label:$password" >> "$file_path"
        echo "Password for '$label' stored."
    fi
}

# Function to retrieve and copy the password to the clipboard
get_password() {
    local label="$1"
    local password

    if password=$(grep "^$label:" "$file_path" | cut -d':' -f2-); then
        if [ -n "$password" ]; then
            echo "$password"
            echo -n "$password" | xclip -selection clipboard
            echo "Password for '$label' copied to clipboard."
        else
            echo "No password found for '$label'."
            exit 1
        fi
    else
        echo "No password found for '$label'."
        exit 1
    fi
}

# Function to list all labels (keys) with passwords
list_labels() {
   cat "$file_path" | sort
}

# Function to delete a label and its associated password
delete_password() {
    local label="$1"

    # Check if the label exists
    if grep -q "^$label:" "$file_path"; then
        # Delete the label and its associated password
        sed -i "/^$label:/d" "$file_path"
        echo "Password for '$label' deleted."
    else
        echo "No password found for '$label'."
        exit 1
    fi
}

# Function to generate a random password
generate_password() {
    local label="$1"
    local password=$(openssl rand -base64 12)  # Generates a 12-character password

    # Check if the label already exists
    if grep -q "^$label:" "$file_path"; then
        # Update existing password
        sed -i "/^$label:/c\\$label:$password" "$file_path"
        echo "Password for '$label' updated with auto-generated password."
    else
        # Add new password
        echo "$label:$password" >> "$file_path"
        echo "Password for '$label' auto-generated and stored."
    fi

    echo -n "$password" | xclip -selection clipboard
    echo "Auto-generated password for '$label' copied to clipboard."
}

# Evaluating arguments
case "$1" in
    'add')
        if [ -z "$2" ]; then
            echo "Usage: $0 add <label:password>"
            exit 1
        else
            update_file "$2"
        fi
        ;;
    'get')
        if [ -z "$2" ]; then
            echo "Usage: $0 get <label>"
            exit 1
        else
            get_password "$2"
        fi
        ;;
    'list')
        list_labels
        ;;
    'delete')
        if [ -z "$2" ]; then
            echo "Usage: $0 delete <label>"
            exit 1
        else
            delete_password "$2"
        fi
        ;;
    'auto')
        if [ -z "$2" ]; then
            echo "Usage: $0 auto <label>"
            exit 1
        else
            generate_password "$2"
        fi
        ;;
    *)
        echo "Usage: $0 {add <label:password>|get <label>|list|delete <label>|auto <label>}"
        echo "  add <label:password>  Add or update a password for the specified label."
        echo "  get <label>           Copy the stored password for the specified label to the clipboard."
        echo "  list                  List all labels (keys) with stored passwords."
        echo "  delete <label>        Delete the stored password for the specified label."
        echo "  auto <label>          Generate and store a random password for the specified label."
        ;;
esac
